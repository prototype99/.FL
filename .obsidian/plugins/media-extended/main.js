/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    mediaFragmentsEmbed: true,
    timestampLink: false,
    extendedImageEmbedSyntax: false,
};
class MESettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        const options = [
            {
                k: "mediaFragmentsEmbed",
                name: "Embed Media Fragments",
                desc: createFragment(descEl => {
                    descEl.appendText("If enabled, you can write ![[demo.mp4#t=10]] to embed the specific fragment of video/audio. ");
                    descEl.createEl('br');
                    descEl.appendText("Loop is also available by append #loop or #t=...&loop to the end of filename");
                    descEl.createEl('br');
                    descEl.appendText("Restart the app to take effects");
                })
            },
            {
                k: "timestampLink",
                name: "Timestamps for Media",
                desc: createFragment(descEl => {
                    descEl.appendText("If enabled, you can write [[demo.mp4#t=10]] to create timestamp link to the video/audio. Click on the link would open the media file if it's not opened yet. ");
                    descEl.createEl('br');
                    descEl.appendText("PS: Only works in preview mode, hover preview on link is not available");
                    descEl.createEl('br');
                    descEl.appendText("Restart the app to take effects");
                })
            },
            {
                k: "extendedImageEmbedSyntax",
                name: "Extended Image Embed Syntax",
                desc: createFragment(descEl => {
                    descEl.appendText("If enabled, you can write ![](link/to/demo.mp4) to embed video and audio.");
                    descEl.createEl('br');
                    descEl.appendText("Support direct file links (with file extension) and videos from video hosts (Youtube, Bilibili)");
                    descEl.createEl('br');
                    descEl.appendText("Restart the app to take effects");
                })
            },
        ];
        for (const o of options) {
            setOption(o, this);
        }
    }
}
function setOption({ k, name, desc }, tab) {
    new obsidian.Setting(tab.containerEl)
        .setName(name)
        .setDesc(desc)
        .addToggle((toggle) => toggle.setValue(tab.plugin.settings[k]).onChange((value) => __awaiter(this, void 0, void 0, function* () {
        tab.plugin.settings[k] = value;
        tab.plugin.saveData(tab.plugin.settings);
        tab.display();
    })));
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

var decodeUriComponent = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};

var splitOnFirst = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};

var filterObj = function (obj, predicate) {
	var ret = {};
	var keys = Object.keys(obj);
	var isArr = Array.isArray(predicate);

	for (var i = 0; i < keys.length; i++) {
		var key = keys[i];
		var val = obj[key];

		if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
			ret[key] = val;
		}
	}

	return ret;
};

var queryString = createCommonjsModule(function (module, exports) {





const isNullOrUndefined = value => value === null || value === undefined;

function encoderForArrayFormat(options) {
	switch (options.arrayFormat) {
		case 'index':
			return key => (result, value) => {
				const index = result.length;

				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[', index, ']'].join('')];
				}

				return [
					...result,
					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
				];
			};

		case 'bracket':
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[]'].join('')];
				}

				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
			};

		case 'comma':
		case 'separator':
		case 'bracket-separator': {
			const keyValueSep = options.arrayFormat === 'bracket-separator' ?
				'[]=' :
				'=';

			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				// Translate null to an empty string so that it doesn't serialize as 'null'
				value = value === null ? '' : value;

				if (result.length === 0) {
					return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
				}

				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
			};
		}

		default:
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, encode(key, options)];
				}

				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
			};
	}
}

function parserForArrayFormat(options) {
	let result;

	switch (options.arrayFormat) {
		case 'index':
			return (key, value, accumulator) => {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return (key, value, accumulator) => {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'comma':
		case 'separator':
			return (key, value, accumulator) => {
				const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
				const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
				value = isEncodedArray ? decode(value, options) : value;
				const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
				accumulator[key] = newValue;
			};

		case 'bracket-separator':
			return (key, value, accumulator) => {
				const isArray = /(\[\])$/.test(key);
				key = key.replace(/\[\]$/, '');

				if (!isArray) {
					accumulator[key] = value ? decode(value, options) : value;
					return;
				}

				const arrayValue = value === null ?
					[] :
					value.split(options.arrayFormatSeparator).map(item => decode(item, options));

				if (accumulator[key] === undefined) {
					accumulator[key] = arrayValue;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], arrayValue);
			};

		default:
			return (key, value, accumulator) => {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function validateArrayFormatSeparator(value) {
	if (typeof value !== 'string' || value.length !== 1) {
		throw new TypeError('arrayFormatSeparator must be single character string');
	}
}

function encode(value, options) {
	if (options.encode) {
		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function decode(value, options) {
	if (options.decode) {
		return decodeUriComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	}

	if (typeof input === 'object') {
		return keysSorter(Object.keys(input))
			.sort((a, b) => Number(a) - Number(b))
			.map(key => input[key]);
	}

	return input;
}

function removeHash(input) {
	const hashStart = input.indexOf('#');
	if (hashStart !== -1) {
		input = input.slice(0, hashStart);
	}

	return input;
}

function getHash(url) {
	let hash = '';
	const hashStart = url.indexOf('#');
	if (hashStart !== -1) {
		hash = url.slice(hashStart);
	}

	return hash;
}

function extract(input) {
	input = removeHash(input);
	const queryStart = input.indexOf('?');
	if (queryStart === -1) {
		return '';
	}

	return input.slice(queryStart + 1);
}

function parseValue(value, options) {
	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
		value = Number(value);
	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
		value = value.toLowerCase() === 'true';
	}

	return value;
}

function parse(query, options) {
	options = Object.assign({
		decode: true,
		sort: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ',',
		parseNumbers: false,
		parseBooleans: false
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const formatter = parserForArrayFormat(options);

	// Create an object with no prototype
	const ret = Object.create(null);

	if (typeof query !== 'string') {
		return ret;
	}

	query = query.trim().replace(/^[?#&]/, '');

	if (!query) {
		return ret;
	}

	for (const param of query.split('&')) {
		if (param === '') {
			continue;
		}

		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

		// Missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
		formatter(decode(key, options), value, ret);
	}

	for (const key of Object.keys(ret)) {
		const value = ret[key];
		if (typeof value === 'object' && value !== null) {
			for (const k of Object.keys(value)) {
				value[k] = parseValue(value[k], options);
			}
		} else {
			ret[key] = parseValue(value, options);
		}
	}

	if (options.sort === false) {
		return ret;
	}

	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
		const value = ret[key];
		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
			// Sort object keys, not values
			result[key] = keysSorter(value);
		} else {
			result[key] = value;
		}

		return result;
	}, Object.create(null));
}

exports.extract = extract;
exports.parse = parse;

exports.stringify = (object, options) => {
	if (!object) {
		return '';
	}

	options = Object.assign({
		encode: true,
		strict: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ','
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const shouldFilter = key => (
		(options.skipNull && isNullOrUndefined(object[key])) ||
		(options.skipEmptyString && object[key] === '')
	);

	const formatter = encoderForArrayFormat(options);

	const objectCopy = {};

	for (const key of Object.keys(object)) {
		if (!shouldFilter(key)) {
			objectCopy[key] = object[key];
		}
	}

	const keys = Object.keys(objectCopy);

	if (options.sort !== false) {
		keys.sort(options.sort);
	}

	return keys.map(key => {
		const value = object[key];

		if (value === undefined) {
			return '';
		}

		if (value === null) {
			return encode(key, options);
		}

		if (Array.isArray(value)) {
			if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
				return encode(key, options) + '[]';
			}

			return value
				.reduce(formatter(key), [])
				.join('&');
		}

		return encode(key, options) + '=' + encode(value, options);
	}).filter(x => x.length > 0).join('&');
};

exports.parseUrl = (url, options) => {
	options = Object.assign({
		decode: true
	}, options);

	const [url_, hash] = splitOnFirst(url, '#');

	return Object.assign(
		{
			url: url_.split('?')[0] || '',
			query: parse(extract(url), options)
		},
		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
	);
};

exports.stringifyUrl = (object, options) => {
	options = Object.assign({
		encode: true,
		strict: true
	}, options);

	const url = removeHash(object.url).split('?')[0] || '';
	const queryFromUrl = exports.extract(object.url);
	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

	const query = Object.assign(parsedQueryFromUrl, object.query);
	let queryString = exports.stringify(query, options);
	if (queryString) {
		queryString = `?${queryString}`;
	}

	let hash = getHash(object.url);
	if (object.fragmentIdentifier) {
		hash = `#${encode(object.fragmentIdentifier, options)}`;
	}

	return `${url}${queryString}${hash}`;
};

exports.pick = (input, filter, options) => {
	options = Object.assign({
		parseFragmentIdentifier: true
	}, options);

	const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
	return exports.stringifyUrl({
		url,
		query: filterObj(query, filter),
		fragmentIdentifier
	}, options);
};

exports.exclude = (input, filter, options) => {
	const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

	return exports.pick(input, exclusionFilter, options);
};
});

/**
 * See also: https://www.w3.org/TR/media-frags/#valid-uri
 */
var MFDefs = {
    tFrag: /^(?<start>[\w:\.]*?)(?:,(?<end>[\w:\.]+?))?$/,
    npt_sec: /^\d+(?:\.\d+)?$/,
    npt_mmss: /^(?<mm>[0-5]\d):(?<ss>[0-5]\d(?:\.\d+)?)$/,
    npt_hhmmss: /^(?<hh>\d+):(?<mm>[0-5]\d):(?<ss>[0-5]\d(?:\.\d+)?)$/,
};

function parseTF(hash) {
    if (hash) {
        const params = queryString.parse(hash);
        const paramT = params.t;
        let match;
        if (paramT &&
            typeof paramT === "string" &&
            (match = MFDefs.tFrag.exec(paramT)) !== null) {
            if (!match.groups)
                throw new Error("tFragRegex match error");
            const { start, end } = match.groups;
            const timeSpan = getTimeSpan(start, end);
            if (timeSpan)
                return Object.assign(Object.assign({}, timeSpan), { raw: paramT });
        }
    }
    return null;
}
function bindTimeSpan(timeSpan, player) {
    if (!player)
        return;
    if (timeSpan.end !== Infinity) {
        player.ontimeupdate = function (e) {
            const p = this;
            if (p.currentTime >= timeSpan.end) {
                p.pause();
                p.ontimeupdate = null;
            }
        };
    }
    player.currentTime = timeSpan.start;
    if (player.paused)
        player.play();
}
function isHTMLMediaEl_TF(el) {
    return el.timeSpan !== undefined;
}
function getTimeSpan(start, end) {
    // start may be an empty string
    const startRaw = start ? start : null;
    const endRaw = end !== null && end !== void 0 ? end : null;
    let startTime, endTime;
    if (startRaw && endRaw) {
        startTime = convertTime(startRaw);
        endTime = convertTime(endRaw);
    }
    else if (startRaw) {
        startTime = convertTime(startRaw);
        endTime = Infinity;
    }
    else if (endRaw) {
        startTime = 0;
        endTime = convertTime(endRaw);
    }
    else {
        console.error(start, end);
        throw new Error("Missing startTime and endTime");
    }
    if (startTime === null || endTime === null) {
        return null;
    }
    else {
        return { start: startTime, end: endTime };
    }
}
function convertTime(input) {
    const npttimedef = /^(?:npt:)?([\d\.:]+)$/;
    if (npttimedef.test(input)) {
        const rawTime = input.match(npttimedef)[1];
        let match;
        if ((match = MFDefs.npt_sec.exec(rawTime)) !== null) {
            return +match[0];
        }
        else if ((match = MFDefs.npt_mmss.exec(rawTime)) !== null) {
            if (!match.groups)
                throw new Error("npt_mmss match error");
            const { mm, ss } = match.groups;
            return +mm * 60 + +ss;
        }
        else if ((match = MFDefs.npt_hhmmss.exec(rawTime)) !== null) {
            if (!match.groups)
                throw new Error("npt_hhmmss match error");
            const { hh, mm, ss } = match.groups;
            return +hh * 60 + +mm * 60 + +ss;
        }
        else
            return null;
    }
    else {
        console.error("fail to parse npt: " + input);
        return null;
    }
}

// import Plyr from "plyr"
/**
 * HTMLMediaElement with temporal fragments
 */
function processInternalLinks(el, ctx) {
    const plugin = this;
    const internalLinkObs = new MutationObserver((mutationsList, observer) => {
        for (const m of mutationsList) {
            handleLink(m.target);
            observer.disconnect();
        }
    });
    for (const link of el.querySelectorAll("a.internal-link")) {
        internalLinkObs.observe(link, { attributeFilter: ["class"] });
    }
    /**
     * Update internal links to media file to respond to temporal fragments
     */
    function handleLink(oldLink) {
        if (oldLink.hasClass("is-unresolved"))
            return;
        let srcLinktext = oldLink.dataset.href;
        if (!srcLinktext) {
            console.error(oldLink);
            throw new Error("no href found in a.internal-link");
        }
        const { path: linktext, subpath: hash } = obsidian.parseLinktext(srcLinktext);
        const timeSpan = parseTF(hash);
        if (timeSpan) {
            const newLink = createEl("a", {
                cls: "internal-link",
                text: oldLink.innerText,
            });
            newLink.onclick = (e) => {
                const workspace = plugin.app.workspace;
                let openedMedia = [];
                const matchedFile = plugin.app.metadataCache.getFirstLinkpathDest(linktext, ctx.sourcePath);
                if (!matchedFile)
                    return;
                workspace.iterateAllLeaves((leaf) => {
                    if (leaf.view instanceof obsidian.FileView && leaf.view.file === matchedFile)
                        openedMedia.push(leaf.view.contentEl);
                });
                function getPlayer(e) {
                    return e.querySelector("div.video-container > video, div.video-container > audio");
                }
                if (openedMedia.length)
                    openedMedia.forEach((e) => {
                        bindTimeSpan(timeSpan, getPlayer(e));
                    });
                else {
                    const file = plugin.app.metadataCache.getFirstLinkpathDest(linktext, ctx.sourcePath);
                    if (!file)
                        return;
                    const fileLeaf = workspace.createLeafBySplit(workspace.activeLeaf);
                    fileLeaf.openFile(file).then(() => {
                        if (fileLeaf.view instanceof obsidian.FileView)
                            bindTimeSpan(timeSpan, getPlayer(fileLeaf.view.contentEl));
                    });
                }
            };
            if (oldLink.parentNode) {
                oldLink.parentNode.replaceChild(newLink, oldLink);
            }
            else {
                console.error(oldLink);
                throw new Error("parentNode not found");
            }
        }
    }
}
// Process internal embeds with hash
function processInternalEmbeds(
/* this: MediaExtended,  */ el, ctx) {
    // const plugin = this;
    const internalEmbedObs = new MutationObserver((mutationsList) => mutationsList.forEach((m) => {
        if (m.addedNodes.length)
            switch (m.addedNodes[0].nodeName) {
                case "VIDEO":
                case "AUDIO":
                    handleMedia(m);
                    break;
                case "IMG":
                    // Do nothing
                    break;
                default:
                    throw new TypeError(`Unexpected addnote type: ${m.addedNodes[0].nodeName}`);
            }
    }));
    for (const span of el.querySelectorAll("span.internal-embed")) {
        internalEmbedObs.observe(span, { childList: true });
        setTimeout(() => {
            internalEmbedObs.disconnect();
            console.log("internalEmbedObs disconnected");
        }, 1500);
    }
    /**
     * Update media embeds to respond to temporal fragments
     */
    function handleMedia(m) {
        /** src="linktext" */
        const span = m.target;
        const srcLinktext = span.getAttr("src");
        if (srcLinktext === null) {
            console.error(span);
            throw new TypeError("src not found on container <span>");
        }
        const { subpath: hash } = obsidian.parseLinktext(srcLinktext);
        const timeSpan = parseTF(hash);
        const player = m.addedNodes[0];
        if (timeSpan !== null) {
            // import timestamps to player
            injectTimestamp(player, timeSpan);
        }
        // null: exist, with no value (#loop)
        if (queryString.parse(hash).loop === null) {
            player.loop = true;
        }
    }
}
function injectTimestamp(player, timeSpan) {
    player.timeSpan = timeSpan;
    // inject media fragment into player's src
    const { path, subpath: hash } = obsidian.parseLinktext(player.src);
    let hashObj = queryString.parse(hash);
    hashObj.t = timeSpan.raw;
    player.src = path + "#" + queryString.stringify(hashObj);
    // inject event handler to restrict play range
    player.onplaying = (e) => {
        const player = e.target;
        if (isHTMLMediaEl_TF(player)) {
            const { timeSpan: { start, end }, currentTime, } = player;
            if (currentTime > end || currentTime < start) {
                player.currentTime = start;
            }
        }
        else {
            console.error(player);
            throw new Error("missing timeSpan in HTMLMediaEl_TF");
        }
    };
    player.ontimeupdate = (e) => {
        const player = e.target;
        if (isHTMLMediaEl_TF(player)) {
            const { timeSpan: { start, end }, currentTime, } = player;
            // check if is HTMLMediaEl_TF object
            if (currentTime > end) {
                if (!player.loop) {
                    player.pause();
                }
                else {
                    player.currentTime = start;
                }
            }
        }
        else {
            console.error(player);
            throw new Error("missing timeSpan in HTMLMediaEl_TF");
        }
    };
}
function processExternalEmbeds(el, ctx) {
    for (const e of el.querySelectorAll("img[referrerpolicy]")) {
        const replaceWith = (newEl) => {
            if (srcEl.parentNode) {
                srcEl.parentNode.replaceChild(newEl, srcEl);
            }
            else {
                console.error(srcEl);
                throw new Error("parentNode of image not found");
            }
        };
        const srcEl = e;
        let url;
        try {
            url = new URL(srcEl.src);
        }
        catch (error) {
            // if url is invaild, do nothing and break current loop
            console.error(error, srcEl);
            break;
        }
        // if url contains no extension, type = null
        let type = null;
        if (!url.pathname.includes(".")) {
            const ext = url.pathname.split(".").pop();
            switch (ext) {
                case "mp3":
                case "wav":
                case "m4a":
                case "ogg":
                case "3gp":
                case "flac":
                    type = "audio";
                    break;
                case "mp4":
                case "webm":
                case "ogv":
                    type = "video";
                    break;
            }
        }
        let newEl = null;
        if (type) {
            newEl = createEl(type);
            newEl.src = srcEl.src;
            newEl.controls = true;
            replaceWith(newEl);
        }
        else if (newEl = getEmbedFrom(url)) {
            replaceWith(newEl);
        }
    }
}
function convertToEmbedUrl(src) {
    switch (src.hostname) {
        case "www.bilibili.com":
            if (src.pathname.startsWith("/video")) {
                let videoId = src.pathname.replace("/video/", "");
                let queryStr;
                if (/^bv/i.test(videoId)) {
                    queryStr = `?bvid=${videoId}`;
                }
                else if (/^av/i.test(videoId)) {
                    queryStr = `?aid=${videoId}`;
                }
                else {
                    console.error(`invaild bilibili video-id: ${videoId}`);
                    return null;
                }
                return `https://player.bilibili.com/player.html${queryStr}`;
            }
            else {
                console.log("not recognized as bilibili video");
                return null;
            }
        case "www.youtube.com":
            if (src.pathname === "/watch") {
                let videoId = src.searchParams.get("v");
                if (videoId) {
                    return `https://www.youtube.com/embed/${videoId}`;
                }
                else {
                    console.log(`invalid video id from: ${src.toString()}`);
                    return null;
                }
            }
            else {
                console.log("not recognized as youtube video");
                return null;
            }
        default:
            console.log("unsupported video host");
            return null;
    }
}
function getEmbedFrom(url) {
    let embedUrl = convertToEmbedUrl(url);
    if (embedUrl) {
        return createEl("iframe", {
            attr: {
                class: "external-video",
                src: embedUrl,
                scrolling: "no",
                border: "0",
                frameborder: "no",
                framespacing: "0",
                allowfullscreen: false,
                sandbox: "allow-forms allow-presentation allow-same-origin allow-scripts allow-modals"
            },
        });
    }
    else {
        return null;
    }
}

// import Plyr from "plyr"
class MediaExtended extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.settings = DEFAULT_SETTINGS;
    }
    // player = Plyr;
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            Object.assign(this.settings, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading media-extended");
            yield this.loadSettings();
            this.addSettingTab(new MESettingTab(this.app, this));
            if (this.settings.mediaFragmentsEmbed) {
                this.registerMarkdownPostProcessor(processInternalEmbeds);
            }
            if (this.settings.timestampLink) {
                this.registerMarkdownPostProcessor(processInternalLinks.bind(this));
            }
            if (this.settings.extendedImageEmbedSyntax) {
                this.registerMarkdownPostProcessor(processExternalEmbeds);
            }
            // this.registerMarkdownPostProcessor(processVideoPlayer.bind(this));
        });
    }
    onunload() {
        console.log("unloading media-extended");
    }
}
// function processVideoPlayer(el:HTMLElement, ctx:MarkdownPostProcessorContext) {
//    this.player = new Plyr("span.internal-embed > video")
// }

module.exports = MediaExtended;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
